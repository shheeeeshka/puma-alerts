import fs from "fs";
import path from "path";
import { sleep, checkSprintWhitelist } from "./utils.js";
import CONFIG from "./config.js";
import logger from "./logger.js";

class TaskManager {
  constructor(browserManager, notifier) {
    this.browserManager = browserManager;
    this.notifier = notifier;
    this.processedTasks = new Set();
    this.tasksTaken = 0;
    this.monitoringActive = false;
    this.lastTaskCount = 0;
  }

  async startMonitoring() {
    this.monitoringActive = true;
    this.tasksTaken = 0;
    logger.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–¥–∞—á");
    await this.trackTasks();
  }

  async stopMonitoring() {
    this.monitoringActive = false;
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
  }

  async extractTaskUrlFromModal(page) {
    try {
      const url = await page.evaluate(() => {
        const greenBorderElement = document.querySelector(
          '.yfm__wacko[style*="border:2px solid green"]'
        );
        if (!greenBorderElement) return null;

        const linkElement = greenBorderElement.querySelector(
          'a[href*="praktikum-admin.yandex-team.ru"]'
        );
        return linkElement ? linkElement.href : null;
      });

      if (url) {
        logger.info({ url }, "–ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ");
        return url;
      }
      return null;
    } catch (error) {
      logger.error(
        { error: error.message },
        "–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞"
      );
      return null;
    }
  }

  async takeTaskOnPraktikumPage(taskPage) {
    try {
      await taskPage.bringToFront();

      const buttonClicked = await taskPage.evaluate(() => {
        const buttons = [
          ".prisma-button2",
          'button[class*="take"]',
          'button[class*="work"]',
          'button[class*="assign"]',
          'button[type="button"]',
        ];

        for (const selector of buttons) {
          const elements = document.querySelectorAll(selector);
          for (const element of elements) {
            const text = element.textContent.toLowerCase();
            if (
              text.includes("–≤–∑—è—Ç—å") ||
              text.includes("take") ||
              text.includes("work") ||
              text.includes("assign")
            ) {
              element.click();
              return true;
            }
          }
        }
        return false;
      });

      if (buttonClicked) {
        await sleep(2);

        const success = await taskPage.evaluate(() => {
          const successIndicators = [
            'button[class*="taken"]',
            'button[class*="assigned"]',
            ".status-success",
            ".alert-success",
          ];

          return successIndicators.some((selector) =>
            document.querySelector(selector)
          );
        });

        if (success) {
          logger.info("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É");
          return true;
        }
      }

      return false;
    } catch (error) {
      logger.error(
        { error: error.message },
        "–û—à–∏–±–∫–∞ –≤–∑—è—Ç–∏—è –∑–∞–¥–∞—á–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∞–∫—Ç–∏–∫—É–º–∞"
      );
      return false;
    }
  }

  async handleTaskAssignment(taskKey, taskTitle, taskUrl) {
    if (!CONFIG.autoAssign || this.tasksTaken >= CONFIG.maxTasks) {
      return false;
    }

    const mainPage = this.browserManager.getPage();
    if (!mainPage) {
      logger.error("–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞");
      return false;
    }

    try {
      logger.info({ taskKey, taskTitle }, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏");

      const taskPage = await this.browserManager.openNewTab();
      if (!taskPage) {
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É");
        return false;
      }

      try {
        await taskPage.goto(taskUrl, {
          waitUntil: "domcontentloaded",
          timeout: 8000,
        });

        const assigned = await this.takeTaskOnPraktikumPage(taskPage);

        if (assigned) {
          this.tasksTaken++;
          logger.info(
            { taskKey, tasksTaken: this.tasksTaken },
            "–ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É"
          );

          await this.notifier.sendText(
            `‚úÖ –ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É\n"${taskTitle}"\nüìä –í–∑—è—Ç–æ –∑–∞–¥–∞—á: ${this.tasksTaken}/${CONFIG.maxTasks}`
          );
        }

        return assigned;
      } finally {
        await taskPage.close();
        await mainPage.bringToFront();
        await sleep(1);
      }
    } catch (error) {
      logger.error(
        { error: error.message, taskKey },
        "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏"
      );
      return false;
    }
  }

  extractSprintNumber(taskTitle) {
    const match = taskTitle.match(/\[(\d+)\]/);
    return match ? match[1] : null;
  }

  async closeModal(page) {
    try {
      await page.evaluate(() => {
        const closeSelectors = [
          'button[aria-label="Close"]',
          ".modal-close",
          ".close-button",
          '[class*="close"]',
          ".g-modal-close",
        ];

        for (const selector of closeSelectors) {
          const element = document.querySelector(selector);
          if (element) {
            element.click();
            return true;
          }
        }
        return false;
      });
      await sleep(1);
    } catch (error) {
      logger.debug("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞");
    }
  }

  async getNormalTasks() {
    const page = this.browserManager.getPage();
    if (!page) {
      throw new Error("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞");
    }

    try {
      await this.browserManager.reloadPage();
      await sleep(2);

      const result = await page.evaluate(() => {
        const normalTasksSection = Array.from(
          document.querySelectorAll(
            ".collapse-widget-header__title-item_primary"
          )
        ).find(
          (el) =>
            el.textContent.includes("üí®") &&
            el.textContent.includes("–û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏")
        );

        if (!normalTasksSection) {
          return { normalTaskKeys: [], taskTitles: {}, taskCount: 0 };
        }

        const widget = normalTasksSection.closest(".filter-widget");
        if (!widget) {
          return { normalTaskKeys: [], taskTitles: {}, taskCount: 0 };
        }

        const taskTable = widget.querySelector("table.gt-table");
        if (!taskTable) {
          return { normalTaskKeys: [], taskTitles: {}, taskCount: 0 };
        }

        const taskRows = taskTable.querySelectorAll("tr[data-key]");
        const tasks = [];
        const taskTitles = {};

        taskRows.forEach((row) => {
          const key = row.getAttribute("data-key");
          if (key && key.startsWith("PCR-")) {
            const titleElement =
              row.querySelector('.edit-cell__text, a[href*="/browse/"]') ||
              row.querySelector("td:nth-child(2)");
            const title = titleElement ? titleElement.textContent.trim() : key;

            tasks.push(key);
            taskTitles[key] = title;
          }
        });

        return {
          normalTaskKeys: tasks,
          taskTitles: taskTitles,
          taskCount: tasks.length,
        };
      });

      logger.debug(
        {
          taskCount: result.normalTaskKeys.length,
          tasks: result.normalTaskKeys,
        },
        "–ù–∞–π–¥–µ–Ω—ã –∑–∞–¥–∞—á–∏"
      );

      return result;
    } catch (error) {
      logger.error({ error: error.message }, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á");
      return { normalTaskKeys: [], taskTitles: {}, taskCount: 0 };
    }
  }

  async filterTasksBySprint(tasks, taskTitles) {
    const filteredTasks = [];
    const filteredTitles = {};

    for (const taskKey of tasks) {
      const title = taskTitles[taskKey];
      const hasSprintBrackets = /\[\d+\]/.test(title);

      if (hasSprintBrackets) {
        const shouldProcess = checkSprintWhitelist(
          title,
          CONFIG.sprintWhitelist
        );
        if (shouldProcess) {
          filteredTasks.push(taskKey);
          filteredTitles[taskKey] = title;
        }
      } else {
        if (CONFIG.sprintWhitelist.length === 0) {
          filteredTasks.push(taskKey);
          filteredTitles[taskKey] = title;
        }
      }
    }

    return { filteredTasks, filteredTitles };
  }

  async processTasks(tasks, taskTitles, isInitial = false) {
    const newTasks = tasks.filter(
      (taskKey) => !this.processedTasks.has(taskKey)
    );

    if (newTasks.length === 0) {
      return;
    }

    logger.info(
      { newTasksCount: newTasks.length, newTasks },
      "–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"
    );

    try {
      const mainPage = this.browserManager.getPage();
      if (!mainPage) {
        throw new Error("–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
      }

      const tasksWithUrls = [];

      for (const taskKey of newTasks) {
        const taskTitle = taskTitles[taskKey];
        let taskUrl = null;
        let attempts = 0;
        const maxAttempts = 3;

        while (attempts < maxAttempts && !taskUrl) {
          attempts++;
          try {
            logger.debug(
              { taskKey, attempt: attempts },
              "–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å URL –∑–∞–¥–∞—á–∏"
            );

            const screenshotDir = path.join(process.cwd(), "debug_screenshots");
            if (!fs.existsSync(screenshotDir)) {
              fs.mkdirSync(screenshotDir, { recursive: true });
            }

            const taskClicked = await mainPage.evaluate((taskKey) => {
              const selectors = [
                `tr[data-key="${taskKey}"]`,
                `[data-key="${taskKey}"] .edit-cell__text`,
                `a[href*="${taskKey}"]`,
                `[data-key="${taskKey}"] td:first-child`,
              ];

              for (const selector of selectors) {
                const element = document.querySelector(selector);
                if (element) {
                  element.click();
                  return true;
                }
              }
              return false;
            }, taskKey);

            if (!taskClicked) {
              logger.warn({ taskKey }, "–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∑–∞–¥–∞—á—É");

              await mainPage.screenshot({
                path: path.join(
                  screenshotDir,
                  `click_failed_${taskKey}_attempt_${attempts}.png`
                ),
                fullPage: true,
              });
              continue;
            }

            await sleep(2 + attempts);

            taskUrl = await this.extractTaskUrlFromModal(mainPage);

            if (!taskUrl) {
              logger.warn(
                { taskKey, attempt: attempts },
                "URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞"
              );

              await mainPage.screenshot({
                path: path.join(
                  screenshotDir,
                  `modal_not_found_${taskKey}_attempt_${attempts}.png`
                ),
                fullPage: true,
              });

              const modalContent = await mainPage.evaluate(() => {
                const modal = document.querySelector(
                  '.modal-content, [class*="modal"], .g-modal'
                );
                return modal ? modal.innerHTML : "–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ";
              });

              logger.debug(
                { taskKey, modalContent: modalContent.substring(0, 500) },
                "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞"
              );

              await this.closeModal(mainPage);
              await sleep(1);
            }
          } catch (error) {
            logger.error(
              { taskKey, error: error.message },
              "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏"
            );

            const screenshotDir = path.join(process.cwd(), "debug_screenshots");
            await mainPage.screenshot({
              path: path.join(
                screenshotDir,
                `error_${taskKey}_attempt_${attempts}.png`
              ),
              fullPage: true,
            });

            await this.closeModal(mainPage);
          }
        }

        if (taskUrl) {
          tasksWithUrls.push({
            key: taskKey,
            title: taskTitle,
            url: taskUrl,
          });
          logger.info({ taskKey, taskUrl }, "URL –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω");

          await mainPage.screenshot({
            path: path.join(
              process.cwd(),
              "debug_screenshots",
              `success_${taskKey}.png`
            ),
            fullPage: true,
          });
        } else {
          logger.error(
            { taskKey },
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫"
          );

          await mainPage.screenshot({
            path: path.join(
              process.cwd(),
              "debug_screenshots",
              `failed_${taskKey}.png`
            ),
            fullPage: true,
          });
        }

        await this.closeModal(mainPage);
        await sleep(1.5);
      }

      if (tasksWithUrls.length > 0) {
        const tasksList = tasksWithUrls
          .map((task) => `‚Ä¢ <a href="${task.url}">${task.title}</a>`)
          .join("\n");

        await this.notifier.sendText(
          `üöÄ <b>${
            isInitial
              ? "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ!"
              : "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏!"
          }</b>\n\n${tasksList}\n\n–í–∑—è—Ç–æ –∑–∞–¥–∞—á: ${this.tasksTaken}/${
            CONFIG.maxTasks
          }`
        );

        if (CONFIG.autoAssign && this.tasksTaken < CONFIG.maxTasks) {
          const { filteredTasks, filteredTitles } =
            await this.filterTasksBySprint(newTasks, taskTitles);
          const assignedTasks = [];

          for (const task of tasksWithUrls) {
            if (
              this.tasksTaken < CONFIG.maxTasks &&
              filteredTasks.includes(task.key)
            ) {
              const assigned = await this.handleTaskAssignment(
                task.key,
                task.title,
                task.url
              );
              if (assigned) {
                assignedTasks.push(task.title);
              }
              await sleep(1);
            }
          }

          if (assignedTasks.length > 0) {
            await this.notifier.sendText(
              `‚úÖ –£–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É ${
                assignedTasks.length
              } –∑–∞–¥–∞—á:\n${assignedTasks
                .map((task) => `‚Ä¢ ${task}`)
                .join("\n")}\nüìä –í–∑—è—Ç–æ –∑–∞–¥–∞—á: ${this.tasksTaken}/${
                CONFIG.maxTasks
              }`
            );
          }
        }
      }

      newTasks.forEach((taskKey) => this.processedTasks.add(taskKey));
    } catch (error) {
      logger.error(
        { error: error.message },
        "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á"
      );

      const mainPage = this.browserManager.getPage();
      if (mainPage) {
        const screenshotDir = path.join(process.cwd(), "debug_screenshots");
        await mainPage.screenshot({
          path: path.join(screenshotDir, `critical_error_${Date.now()}.png`),
          fullPage: true,
        });
      }
    }
  }

  async checkAuth() {
    const page = this.browserManager.getPage();
    try {
      const currentUrl = await page.url();
      if (
        currentUrl.includes("passport.yandex-team.ru") ||
        currentUrl.includes("passport?mode=auth")
      ) {
        logger.warn("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ URL");
        await this.notifier.sendText("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ");
        return false;
      }

      const isAuthRequired = await page.evaluate(() => {
        const authSelectors = [
          'input[type="password"]',
          'input[name="password"]',
          ".passport-Domik",
          ".passport-AccountList",
          'a[href*="passport.yandex-team.ru"]',
        ];

        const hasAuthElements = authSelectors.some(
          (selector) => document.querySelector(selector) !== null
        );

        const hasAuthText =
          document.body.textContent.includes("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –≤—Ö–æ–¥–∞") ||
          document.body.textContent.includes("–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç");

        return hasAuthElements || hasAuthText;
      });

      if (isAuthRequired) {
        logger.warn("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
        await this.notifier.sendText("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ");
        return false;
      }

      return true;
    } catch (error) {
      logger.error({ error: error.message }, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
      return false;
    }
  }

  async trackTasks() {
    let errorCount = 0;
    const maxErrors = 10;

    try {
      await this.browserManager.navigateTo(CONFIG.targetBoardUrl);

      const isAuthenticated = await this.checkAuth();
      if (!isAuthenticated) {
        logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...");
        await this.notifier.sendText("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ");
        await sleep(240);

        const stillNotAuthenticated = await this.checkAuth();
        if (stillNotAuthenticated) {
          await this.notifier.sendText(
            "‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
          );
          return;
        }
      }

      const { normalTaskKeys, taskTitles, taskCount } =
        await this.getNormalTasks();
      this.lastTaskCount = taskCount;

      await this.processTasks(normalTaskKeys, taskTitles, true);

      let prevTasks = normalTaskKeys;

      await this.notifier.sendText(
        `üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—á–∞—Ç\n–ê–≤—Ç–æ–∑–∞–±–æ—Ä: ${
          CONFIG.autoAssign ? "‚úÖ" : "‚ùå"
        }\n–õ–∏–º–∏—Ç –∑–∞–¥–∞—á: ${CONFIG.maxTasks}\n–ó–∞–¥–∞—á –≤ —Å–µ–∫—Ü–∏–∏: ${taskCount}`
      );

      while (this.monitoringActive) {
        try {
          const isAuthenticated = await this.checkAuth();
          if (!isAuthenticated) {
            await this.notifier.sendText(
              "‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
            );
            break;
          }

          await sleep(3);

          const {
            normalTaskKeys: currentTasks,
            taskTitles: currentTitles,
            taskCount: currentCount,
          } = await this.getNormalTasks();

          if (currentCount !== this.lastTaskCount) {
            logger.info(
              {
                previousCount: this.lastTaskCount,
                currentCount: currentCount,
              },
              "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á"
            );
            this.lastTaskCount = currentCount;
          }

          const newTasks = currentTasks.filter(
            (task) => !prevTasks.includes(task)
          );

          if (newTasks.length > 0) {
            logger.info({ newTasks }, "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏");
            await this.processTasks(newTasks, currentTitles, false);
          }

          prevTasks = currentTasks;
          errorCount = 0;

          await sleep(10);
        } catch (error) {
          logger.error({ error: error.message }, "–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
          errorCount++;

          if (errorCount >= maxErrors) {
            await this.notifier.sendText(
              `‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ ${maxErrors} –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥`
            );
            throw new Error(
              `–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ (${maxErrors})`
            );
          }

          await sleep(15);
        }
      }
    } catch (error) {
      logger.error({ error: error.message }, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
      await this.notifier.sendText(
        `‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${error.message}`
      );
    }
  }

  getTasksTaken() {
    return this.tasksTaken;
  }

  isMonitoringActive() {
    return this.monitoringActive;
  }
}

export default TaskManager;
