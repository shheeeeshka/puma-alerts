import fs from "fs";
import axios from "axios";
import path from "path";
import { fileURLToPath } from "url";
import { CONFIG } from "./index.js";

class TelegramNotifier {
  constructor({ botToken, chatId }) {
    if (!botToken) {
      throw new Error("–¢—Ä–µ–±—É–µ—Ç—Å—è botToken");
    }
    this.botToken = botToken;
    this.chatId = chatId;
    this.apiUrl = `https://api.telegram.org/bot${this.botToken}`;
  }

  async sendText(message, keyboard = null) {
    if (!this.chatId) {
      console.warn("chatId –Ω–µ –∑–∞–¥–∞–Ω");
      return;
    }
    try {
      const data = {
        chat_id: this.chatId,
        text: message,
        parse_mode: "HTML",
      };

      if (keyboard) {
        data.reply_markup = keyboard;
      }

      const response = await axios.post(`${this.apiUrl}/sendMessage`, data);
      return response.data;
    } catch (error) {
      console.error(
        "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞:",
        error.response?.data || error.message
      );
      throw error;
    }
  }

  async sendAlert({ imagePath, link, caption = "", showBoardButton = false }) {
    if (!this.chatId) return;

    try {
      const __filename = fileURLToPath(import.meta.url);
      const __dirname = path.dirname(__filename);
      const fullImagePath = path.join(__dirname, imagePath);

      if (!fs.existsSync(fullImagePath)) {
        throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fullImagePath}`);
      }

      const FormData = (await import("form-data")).default;
      const formData = new FormData();
      formData.append("chat_id", this.chatId);
      formData.append("photo", fs.createReadStream(fullImagePath));
      formData.append("caption", caption);
      formData.append("parse_mode", "HTML");

      if (showBoardButton) {
        formData.append(
          "reply_markup",
          JSON.stringify({
            inline_keyboard: [[{ text: "üìã –û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å–∫—É", url: link }]],
          })
        );
      }

      await axios.post(`${this.apiUrl}/sendPhoto`, formData, {
        headers: formData.getHeaders(),
      });
    } catch (error) {
      console.error(
        "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
        error.response?.data || error.message
      );
      throw error;
    }
  }

  async sendDoubleAlert({
    taskImagePath,
    boardImagePath,
    link,
    tasksInWork,
    maxTasks,
    message = "",
  }) {
    if (!this.chatId) return;

    try {
      const __filename = fileURLToPath(import.meta.url);
      const __dirname = path.dirname(__filename);

      const FormData = (await import("form-data")).default;
      const formData = new FormData();

      const media = [
        {
          type: "photo",
          media: `attach://task_photo`,
          caption: message,
          parse_mode: "HTML",
        },
        {
          type: "photo",
          media: `attach://board_photo`,
        },
      ];

      formData.append("chat_id", this.chatId);
      formData.append("media", JSON.stringify(media));
      formData.append(
        "reply_markup",
        JSON.stringify({
          inline_keyboard: [[{ text: "üìã –û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É", url: link }]],
        })
      );

      formData.append(
        "task_photo",
        fs.createReadStream(path.join(__dirname, taskImagePath))
      );
      formData.append(
        "board_photo",
        fs.createReadStream(path.join(__dirname, boardImagePath))
      );

      await axios.post(`${this.apiUrl}/sendMediaGroup`, formData, {
        headers: formData.getHeaders(),
      });
    } catch (error) {
      console.error(
        "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–≤–æ–π–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
        error.response?.data || error.message
      );
      throw error;
    }
  }

  async sendConfigMenu() {
    const keyboard = {
      inline_keyboard: [
        [{ text: "üìä –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", callback_data: "show_config" }],
        [
          {
            text: CONFIG.autoAssign
              ? "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–±–æ—Ä"
              : "üü¢ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–±–æ—Ä",
            callback_data: "toggle_autoassign",
          },
        ],
        [
          {
            text: "üéØ –õ–∏–º–∏—Ç –∑–∞–¥–∞—á: " + CONFIG.maxTasks,
            callback_data: "change_max_tasks",
          },
        ],
        [{ text: "üìã –í–∞–π—Ç–ª–∏—Å—Ç —Å–ø—Ä–∏–Ω—Ç–æ–≤", callback_data: "change_whitelist" }],
        [{ text: "üåê URL –¥–æ—Å–∫–∏", callback_data: "change_target_url" }],
        [{ text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data: "refresh_config" }],
      ],
    };

    await this.sendText(
      "‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      keyboard
    );
  }

  async handleCallback(query) {
    try {
      const { data, message } = query;

      switch (data) {
        case "show_config":
          const configText =
            `üìã <b>–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\n\n` +
            `üîÑ –ê–≤—Ç–æ–∑–∞–±–æ—Ä –∑–∞–¥–∞—á: ${
              CONFIG.autoAssign ? "‚úÖ –í–∫–ª—é—á–µ–Ω" : "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
            }\n` +
            `üéØ –õ–∏–º–∏—Ç –∑–∞–¥–∞—á: ${CONFIG.maxTasks}\n` +
            `üìã –í–∞–π—Ç–ª–∏—Å—Ç —Å–ø—Ä–∏–Ω—Ç–æ–≤: ${
              CONFIG.sprintWhitelist.join(", ") || "–Ω–µ –∑–∞–¥–∞–Ω"
            }\n` +
            `üåê URL –¥–æ—Å–∫–∏: ${CONFIG.targetUrl}\n` +
            `üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ${
              CONFIG.authRequired ? "‚úÖ –¢—Ä–µ–±—É–µ—Ç—Å—è" : "‚ùå –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
            }`;

          await this.sendText(configText);
          await this.sendConfigMenu();
          break;

        case "toggle_autoassign":
          CONFIG.autoAssign = !CONFIG.autoAssign;
          process.env.AUTO_ASSIGN = CONFIG.autoAssign ? "1" : "0";
          await this.sendText(
            `–ê–≤—Ç–æ–∑–∞–±–æ—Ä –∑–∞–¥–∞—á ${
              CONFIG.autoAssign ? "‚úÖ –≤–∫–ª—é—á–µ–Ω" : "‚ùå –≤—ã–∫–ª—é—á–µ–Ω"
            }`
          );
          await this.sendConfigMenu();
          break;

        case "refresh_config":
          await this.sendText("üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
          await this.sendConfigMenu();
          break;

        default:
          await this.sendText("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
          await this.sendConfigMenu();
      }

      await axios.post(`${this.apiUrl}/answerCallbackQuery`, {
        callback_query_id: query.id,
        text: "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:", error);
      await axios.post(`${this.apiUrl}/answerCallbackQuery`, {
        callback_query_id: query.id,
        text: "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã",
      });
    }
  }

  async listenForChatId() {
    console.log("–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chatId...");
    let offset = 0;
    while (true) {
      try {
        const response = await axios.get(`${this.apiUrl}/getUpdates`, {
          params: { offset, timeout: 30 },
        });
        const updates = response.data.result;

        for (const update of updates) {
          if (update.message && update.message.chat && update.message.chat.id) {
            const chatId = update.message.chat.id;
            await this.sendText(
              `üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–í–∞—à chatId: <code>${chatId}</code>\n\n–ó–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_CHAT_ID`,
              {
                inline_keyboard: [
                  [
                    {
                      text: "‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                      callback_data: "show_config",
                    },
                  ],
                ],
              }
            );
            return chatId;
          }

          if (update.callback_query) {
            await this.handleCallback(update.callback_query);
          }
        }

        if (updates.length > 0) {
          offset = updates[updates.length - 1].update_id + 1;
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:", err.message);
      }
      await new Promise((res) => setTimeout(res, 1000));
    }
  }
}

export default TelegramNotifier;
