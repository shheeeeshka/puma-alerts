import fs from "fs";
import axios from "axios";
import path from "path";
import { fileURLToPath } from "url";

class TelegramNotifier {
  constructor({ botToken, chatId }) {
    if (!botToken) {
      throw new Error("–¢—Ä–µ–±—É–µ—Ç—Å—è botToken –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TelegramNotifier");
    }
    this.botToken = botToken;
    this.chatId = chatId;
    this.apiUrl = `https://api.telegram.org/bot${this.botToken}`;
  }

  async sendText(message) {
    if (!this.chatId) {
      console.warn("chatId –Ω–µ –∑–∞–¥–∞–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", message);
      return;
    }
    try {
      await axios.post(`${this.apiUrl}/sendMessage`, {
        chat_id: this.chatId,
        text: message,
        parse_mode: "HTML",
      });
    } catch (error) {
      console.error(
        "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤ Telegram:",
        error.response?.data || error.message
      );
      throw error;
    }
  }

  async sendAlert({ imagePath, link, taskCount }) {
    if (!this.chatId) {
      console.warn("chatId –Ω–µ –∑–∞–¥–∞–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.");
      return;
    }
    try {
      await this.sendText(
        `üöÄ <b>–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞!</b>\n–í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ –¥—ç—à–±–æ—Ä–¥–µ: ${taskCount}`
      );

      const __filename = fileURLToPath(import.meta.url);
      const __dirname = path.dirname(__filename);
      const fullImagePath = path.join(__dirname, imagePath);

      if (!fs.existsSync(fullImagePath)) {
        throw new Error(`–§–∞–π–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fullImagePath}`);
      }

      const FormData = (await import("form-data")).default;
      const formData = new FormData();
      formData.append("chat_id", this.chatId);
      formData.append("photo", fs.createReadStream(fullImagePath));
      formData.append("caption", `üîó ${link}`);

      await axios.post(`${this.apiUrl}/sendPhoto`, formData, {
        headers: formData.getHeaders(),
      });

      await axios.post(`${this.apiUrl}/sendMessage`, {
        chat_id: this.chatId,
        text: "–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø :",
        reply_markup: {
          inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É", url: link }]],
        },
      });
    } catch (error) {
      console.error(
        "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
        error.response?.data || error.message
      );
      throw error;
    }
  }

  async listenForChatId() {
    console.log("–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chatId...");
    const offset = 0;
    while (true) {
      try {
        const response = await axios.get(`${this.apiUrl}/getUpdates`, {
          params: { offset, timeout: 30 },
        });
        const updates = response.data.result;
        for (const update of updates) {
          if (update.message && update.message.chat && update.message.chat.id) {
            const chatId = update.message.chat.id;
            console.log(`–ü–æ–ª—É—á–µ–Ω chatId: ${chatId}`);
            await this.sendText(
              `–í–∞—à chatId: ${chatId}. –¢–µ–ø–µ—Ä—å –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.`
            );
            return chatId;
          }
        }
        if (updates.length > 0) {
          offset = updates[updates.length - 1].update_id + 1;
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:", err.message);
      }
      await new Promise((res) => setTimeout(res, 3000));
    }
  }
}

export default TelegramNotifier;