import fs from 'fs';
import axios from 'axios';
import path from 'path';
import { fileURLToPath } from 'url';

class TelegramNotifier {
    constructor({ botToken, chatId }) {
        if (!botToken || !chatId) {
            throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è botToken –∏ chatId –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TelegramNotifier');
        }

        this.botToken = botToken;
        this.chatId = chatId;
        this.apiUrl = `https://api.telegram.org/bot${this.botToken}`;
    }

    async sendText(message) {
        try {
            await axios.post(`${this.apiUrl}/sendMessage`, {
                chat_id: this.chatId,
                text: message,
                parse_mode: 'HTML'
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤ Telegram:', error.response?.data || error.message);
            throw error;
        }
    }

    async sendAlert({ imagePath, link, taskCount }) {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–¥–∞—á
            await this.sendText(`üöÄ <b>–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞!</b>\n–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${taskCount}`);

            // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            const __filename = fileURLToPath(import.meta.url);
            const __dirname = path.dirname(__filename);
            const fullImagePath = path.join(__dirname, imagePath);

            if (!fs.existsSync(fullImagePath)) {
                throw new Error(`–§–∞–π–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fullImagePath}`);
            }

            const formData = new FormData();
            formData.append('chat_id', this.chatId);
            formData.append('photo', fs.createReadStream(fullImagePath));
            formData.append('caption', `üîó ${link}`);

            await axios.post(`${this.apiUrl}/sendPhoto`, formData, {
                headers: {
                    ...formData.getHeaders()
                }
            });

            // –ò –∫–Ω–æ–ø–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
            await axios.post(`${this.apiUrl}/sendMessage`, {
                chat_id: this.chatId,
                text: '–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø:',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á–∏', url: link }]
                    ]
                }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.response?.data || error.message);
            throw error;
        }
    }
}

export default TelegramNotifier;